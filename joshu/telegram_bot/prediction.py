import numpy as np
import string
# from stop_words import get_stop_words
from pymorphy2 import MorphAnalyzer

# тут команду HELP добавлять не стал, можно добавить
QUESTIONS_AND_ANSWERS = \
    np.array([
        ['кто ты?',
         'Меня зовут Joshu, я твой персональный помощник. Помогу тебе потратить день максимально продуктивно!'],
        ['Как тебя зовут?',
         'Меня зовут Joshu, я твой персональный помощник. Помогу тебе потратить день максимально продуктивно!'],
        ['Что такое Joshu?',
         'Joshu – приложение, персональный ассистент, который поможет тебе потратить время максимально продуктивно! '],
        ['В чем твоя задача?',
         'Я буду помогать тебе выполнять задачи к дедлайну, справляться с прокрастинацией и правильно использовать '
         'время.'],
        ['Как повысить свою продуктивность и настроиться на работу?',
         'Начни с малого, попытайся привыкнуть и развивай свои возможности. Переключись с негативных мыслей на '
         'рабочие вопросы!'],
        ['Что значит твое имя?',
         'По-японски Joshu – это помощник. Поэтому моя задача – помочь тебе эффективно потратить время.'],
        ['Почему тебя так зовут?',
         'По-японски Joshu – это помощник. Поэтому моя задача – помочь тебе эффективно потратить время.'],
        ['Почему тебя зовут Joshu?',
         'По-японски Joshu – это помощник. Поэтому моя задача – помочь тебе эффективно потратить время.'],
        ['а что ты умеешь?',
         'Могу научить тебя эффективно планировать свое время и привести в порядок дела. Уверен, мы подружимся!'],
        ['Что ты можешь? ',
         'Могу научить тебя эффективно планировать свое время и привести в порядок дела. Уверен, мы подружимся!'],
        ['Как дела?', 'Чудесно! Но будут еще лучше, когда мы выполним твои задачи'],
        ['Не успею сделать задачу', 'Давай перенесем задачу'],
        ['не сделал задачу, что делать?', 'Мы можем перенести срок выполнения задачи на более поздний.'],
        ['Что тут делать?',
         'Смотря какие цели вы перед собой ставите!:) А если серьезно, вы можете вносить свои дела, проверять список '
         'дел на любой день, делегировать какие-то задачи мне. Смотреть дела по статусам, а также по приоритетам. Еще '
         'вы можете советоваться со мной по вопросам оптимизации своего времени.'],
        ['ну и что посоветуешь?',
         'Попробуйте поставить пару дел и завершить их, а я буду внимательно следить, а если потребуется помощь '
         'подключусь. Меньше слов, больше дела! Давайте поставим первую задачу на сегодня :)'],
        ['старт', 'Привет, чем могу быть полезен?'],
        ['привет', 'Привет, чем могу быть полезен?'],
        ['не знаю с чего начать',
         'Слона целиком не съесть, давайте попробуем маленькими шагами прийти к успеху? Москва не сразу строилась.'],
        ['не хочу ничего делать',
         'Ну иногда можно и полениться, может сериал? шучу, предлагаю взять маленькую задачку и доделать ее :)']
    ])


class ChartBot:
    def __init__(self):
        #        self.sw = set(get_stop_words("ru"))
        self.exclude = set(string.punctuation)
        self.morpher = MorphAnalyzer()
        self.matrix = []
        i = 0
        for question in QUESTIONS_AND_ANSWERS[:, 0]:
            lst_q = self.preprocess_txt(question)
            self.matrix.append(lst_q)

    def preprocess_txt(self, line):
        spls = "".join(i for i in line.strip() if i not in self.exclude).split()
        spls = [self.morpher.parse(i.lower())[0].normal_form for i in spls]
        #        spls = [i for i in spls if i not in self.sw and i != ""]
        return spls

    def create_answer(self, question):
        lst_q = self.preprocess_txt(question)
        # смысл следующего кода:
        # у редко встречающихся слов большая информативность и соответственно их надо учитывать с БОЛЬШИМ весом
        rating = {}  # общий рейтинг для всех слов
        for word_q in lst_q:
            i = 0
            pool = []
            for row in self.matrix:
                if word_q in row:
                    pool.append(i)
                i += 1
            for number in pool:
                if number in rating:
                    rating[number] = rating[number] + 1 / len(pool)
                else:
                    rating[number] = 1 / len(pool)
        # найдем номер предложения-вопроса с максимальным рейтингом
        max_ = -1
        max_number = -1
        for number, rate in rating.items():
            if rate > max_:
                max_ = rate
                max_number = number
        if max_number == -1:
            answer_text = "Боюсь пока не могу ответить на этот вопрос, но я постараюсь почитать про это побольше."
        else:
            answer_text = QUESTIONS_AND_ANSWERS[max_number, 1]
        return answer_text
